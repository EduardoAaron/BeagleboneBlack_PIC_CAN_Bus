D G "__PCH__" 0 0 ""5.025""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""24-feb.-16""
D G "__TIME__" 0 0 ""23:04:36""
D G "__18F25K80" 0 0 "1" "* File:   main.c"
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 46 "int8" `54 
f B "set_tris_a" 1 46 "void(int8 value)" `53 
v L "value" 1 47 "int8" `56 
f B "set_tris_b" 1 47 "void(int8 value)" `55 
v L "value" 1 48 "int8" `58 
f B "set_tris_c" 1 48 "void(int8 value)" `57 
v L "value" 1 49 "int8" `60 
f B "set_tris_e" 1 49 "void(int8 value)" `59 
f B "get_tris_a" 1 50 "int8()" `61 
f B "get_tris_b" 1 51 "int8()" `62 
f B "get_tris_c" 1 52 "int8()" `63 
f B "get_tris_e" 1 53 "int8()" `64 
v L "value" 1 54 "int8" `66 
f B "output_a" 1 54 "void(int8 value)" `65 
v L "value" 1 55 "int8" `68 
f B "output_b" 1 55 "void(int8 value)" `67 
v L "value" 1 56 "int8" `70 
f B "output_c" 1 56 "void(int8 value)" `69 
v L "value" 1 57 "int8" `72 
f B "output_e" 1 57 "void(int8 value)" `71 
f B "input_a" 1 58 "int8()" `73 
f B "input_b" 1 59 "int8()" `74 
f B "input_c" 1 60 "int8()" `75 
f B "input_e" 1 61 "int8()" `76 
f B "input_change_a" 1 62 "int8()" `77 
f B "input_change_b" 1 63 "int8()" `78 
f B "input_change_c" 1 64 "int8()" `79 
f B "input_change_e" 1 65 "int8()" `80 
v L "pin" 1 66 "int16" `82 
f B "input" 1 66 "int8(int16 pin)" `81 
v L "pin" 1 67 "int16" `84 
f B "input_state" 1 67 "int8(int16 pin)" `83 
v L "pin" 1 68 "int16" `86 
f B "output_low" 1 68 "void(int16 pin)" `85 
v L "pin" 1 69 "int16" `88 
f B "output_high" 1 69 "void(int16 pin)" `87 
v L "pin" 1 70 "int16" `90 
f B "output_toggle" 1 70 "void(int16 pin)" `89 
v L "pin" 1 71 "int16" `92 
v L "level" 1 71 "int8" `93 
f B "output_bit" 1 71 "void(int16 pin,int8 level)" `91 
v L "pin" 1 72 "int16" `95 
f B "output_float" 1 72 "void(int16 pin)" `94 
v L "pin" 1 73 "int16" `97 
f B "output_drive" 1 73 "void(int16 pin)" `96  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 77 "31744"
d G "PIN_A1" 1 78 "31745"
d G "PIN_A2" 1 79 "31746"
d G "PIN_A3" 1 80 "31747"
d G "PIN_A5" 1 81 "31749"
d G "PIN_A6" 1 82 "31750"
d G "PIN_A7" 1 83 "31751"
d G "PIN_B0" 1 85 "31752"
d G "PIN_B1" 1 86 "31753"
d G "PIN_B2" 1 87 "31754"
d G "PIN_B3" 1 88 "31755"
d G "PIN_B4" 1 89 "31756"
d G "PIN_B5" 1 90 "31757"
d G "PIN_B6" 1 91 "31758"
d G "PIN_B7" 1 92 "31759"
d G "PIN_C0" 1 94 "31760"
d G "PIN_C1" 1 95 "31761"
d G "PIN_C2" 1 96 "31762"
d G "PIN_C3" 1 97 "31763"
d G "PIN_C4" 1 98 "31764"
d G "PIN_C5" 1 99 "31765"
d G "PIN_C6" 1 100 "31766"
d G "PIN_C7" 1 101 "31767"
d G "PIN_E3" 1 103 "31779"
d G "FALSE" 1 106 "0"
d G "TRUE" 1 107 "1"
d G "BYTE" 1 109 "int8"
d G "BOOLEAN" 1 110 "int1"
d G "getc" 1 112 "getch"
d G "fgetc" 1 113 "getch"
d G "getchar" 1 114 "getch"
d G "putc" 1 115 "putchar"
d G "fputc" 1 116 "putchar"
d G "fgets" 1 117 "gets"
d G "fputs" 1 118 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 123 "int8()" `98 
f B "reset_cpu" 1 124 "void()" `99 
f B "sleep" 1 125 "void()" `100 
v L "type" 1 126 "int8" `102 
f G "sleep" 1 126 "void(int8 type)" `101  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 128 "7"
d G "MCLR_FROM_SLEEP" 1 129 "11"
d G "MCLR_FROM_RUN" 1 130 "15"
d G "NORMAL_POWER_UP" 1 131 "12"
d G "BROWNOUT_RESTART" 1 132 "14"
d G "WDT_FROM_SLEEP" 1 133 "3"
d G "RESET_INSTRUCTION" 1 134 "0"
d G "SLEEP_FULL" 1 137 "0" "Default"
d G "SLEEP_IDLE" 1 138 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 145 "int8" `104 
f B "setup_timer_0" 1 145 "void(int8 mode)" `103 
v L "value" 1 146 "int16" `106 
f B "set_timer0" 1 146 "void(int16 value)" `105 
f B "get_timer0" 1 147 "int16()" `107 
v L "mode" 1 148 "int8" `109 
v L "prescaler" 1 148 "int8" `110 
f B "setup_counters" 1 148 "void(int8 mode,int8 prescaler)" `108 
v L "value" 1 149 "int16" `112 
f B "set_rtcc" 1 149 "void(int16 value)" `111 
f B "get_rtcc" 1 150 "int16()" `113  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 152 "0"
d G "T0_EXT_L_TO_H" 1 153 "32"
d G "T0_EXT_H_TO_L" 1 154 "48"
d G "T0_DIV_1" 1 156 "8"
d G "T0_DIV_2" 1 157 "0"
d G "T0_DIV_4" 1 158 "1"
d G "T0_DIV_8" 1 159 "2"
d G "T0_DIV_16" 1 160 "3"
d G "T0_DIV_32" 1 161 "4"
d G "T0_DIV_64" 1 162 "5"
d G "T0_DIV_128" 1 163 "6"
d G "T0_DIV_256" 1 164 "7"
d G "T0_OFF" 1 166 "0x80"
d G "T0_8_BIT" 1 168 "0x40"
d G "RTCC_INTERNAL" 1 170 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 171 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 172 "48"
d G "RTCC_DIV_1" 1 173 "8"
d G "RTCC_DIV_2" 1 174 "0"
d G "RTCC_DIV_4" 1 175 "1"
d G "RTCC_DIV_8" 1 176 "2"
d G "RTCC_DIV_16" 1 177 "3"
d G "RTCC_DIV_32" 1 178 "4"
d G "RTCC_DIV_64" 1 179 "5"
d G "RTCC_DIV_128" 1 180 "6"
d G "RTCC_DIV_256" 1 181 "7"
d G "RTCC_OFF" 1 182 "0x80"
d G "RTCC_8_BIT" 1 183 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 194 "int16" `115 
f B "setup_wdt" 1 194 "void(int16 mode)" `114 
f B "restart_wdt" 1 195 "void()" `116  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 197 "0x100"
d G "WDT_OFF" 1 198 "0"
d G "WDT_4MS" 1 200 "0x300"
d G "WDT_8MS" 1 201 "0x500"
d G "WDT_16MS" 1 202 "0x700"
d G "WDT_32MS" 1 203 "0x900"
d G "WDT_64MS" 1 204 "0xB00"
d G "WDT_128MS" 1 205 "0xD00"
d G "WDT_256MS" 1 206 "0xF00"
d G "WDT_512MS" 1 207 "0x1100"
d G "WDT_1S" 1 208 "0x1300"
d G "WDT_2S" 1 209 "0x1500"
d G "WDT_4S" 1 210 "0x1700"
d G "WDT_8S" 1 211 "0x1900"
d G "WDT_16" 1 212 "0x1B00"
d G "WDT_32S" 1 213 "0x1D00"
d G "WDT_64S" 1 214 "0x1F00"
d G "WDT_128S" 1 215 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 220 "int16" `118 
f B "setup_timer_1" 1 220 "void(int16 mode)" `117 
f B "get_timer1" 1 221 "int16()" `119 
v L "value" 1 222 "int16" `121 
f B "set_timer1" 1 222 "void(int16 value)" `120  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 225 "0"
d G "T1_INTERNAL" 1 226 "0x07"
d G "T1_EXTERNAL" 1 227 "0x87"
d G "T1_EXTERNAL_SYNC" 1 228 "0x83"
d G "T1_FOSC" 1 229 "0x47"
d G "T1_ENABLE_SOSC" 1 231 "0x08"
d G "T1_DIV_BY_1" 1 233 "0"
d G "T1_DIV_BY_2" 1 234 "0x10"
d G "T1_DIV_BY_4" 1 235 "0x20"
d G "T1_DIV_BY_8" 1 236 "0x30"
d G "T1_GATE" 1 238 "0x8000"
d G "T1_GATE_INVERTED" 1 239 "0xC000"
d G "T1_GATE_TOGGLE" 1 240 "0xA000"
d G "T1_GATE_SINGLE" 1 241 "0x9000"
d G "T1_GATE_TIMER2" 1 242 "0x8100"
d G "T1_GATE_COMP1" 1 243 "0x8200"
d G "T1_GATE_COMP2" 1 244 "0x8300"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 249 "int8" `123 
v L "period" 1 249 "int8" `124 
v L "postscale" 1 249 "int8" `125 
f B "setup_timer_2" 1 249 "void(int8 mode,int8 period,int8 postscale)" `122 
f B "get_timer2" 1 250 "int8()" `126 
v L "value" 1 251 "int8" `128 
f B "set_timer2" 1 251 "void(int8 value)" `127  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 253 "0"
d G "T2_DIV_BY_1" 1 254 "4"
d G "T2_DIV_BY_4" 1 255 "5"
d G "T2_DIV_BY_16" 1 256 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
v L "mode" 1 261 "int16" `130 
f B "setup_timer_3" 1 261 "void(int16 mode)" `129 
f B "get_timer3" 1 262 "int16()" `131 
v L "value" 1 263 "int16" `133 
f B "set_timer3" 1 263 "void(int16 value)" `132  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 266 "0"
d G "T3_INTERNAL" 1 267 "0x07"
d G "T3_EXTERNAL" 1 268 "0x87"
d G "T3_EXTERNAL_SYNC" 1 269 "0x83"
d G "T3_FOSC" 1 270 "0x47"
d G "T3_ENABLE_SOSC" 1 272 "0x08"
d G "T3_DIV_BY_1" 1 274 "0"
d G "T3_DIV_BY_2" 1 275 "0x10"
d G "T3_DIV_BY_4" 1 276 "0x20"
d G "T3_DIV_BY_8" 1 277 "0x30"
d G "T3_GATE" 1 279 "0x8000"
d G "T3_GATE_INVERTED" 1 280 "0xC000"
d G "T3_GATE_TOGGLE" 1 281 "0xA000"
d G "T3_GATE_SINGLE" 1 282 "0x9000"
d G "T3_GATE_TIMER4" 1 283 "0x8100"
d G "T3_GATE_COMP1" 1 284 "0x8200"
d G "T3_GATE_COMP2" 1 285 "0x8300"
c L "set_timer3" 1 1 3 "FUNCTION"
v L "mode" 1 290 "int16" `135 
v L "period" 1 290 "int8" `136 
v L "postscaler" 1 290 "int8" `137 
f B "setup_timer_4" 1 290 "void(int16 mode,int8 period,int8 postscaler)" `134 
f B "get_timer4" 1 291 "int8()" `138 
v L "value" 1 292 "int8" `140 
f B "set_timer4" 1 292 "void(int8 value)" `139  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 294 "0"
d G "T4_DIV_BY_1" 1 295 "4"
d G "T4_DIV_BY_4" 1 296 "5"
d G "T4_DIV_BY_16" 1 297 "6"
c L "set_timer4" 1 1 4 "FUNCTION"
v L "mode" 1 303 "int32" `142 
f B "setup_ccp1" 1 303 "void(int32 mode)" `141 
v L "mode" 1 304 "int32" `144 
v L "pwm" 1 304 "int8" `145 
f G "setup_ccp1" 1 304 "void(int32 mode,int8 pwm)" `143 
v L "value" 1 305 "int16" `147 
f B "set_pwm1_duty" 1 305 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 307 "0"
d G "CCP_CAPTURE_FE" 1 308 "0x04"
d G "CCP_CAPTURE_RE" 1 309 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 310 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 311 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 312 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 313 "0x09"
d G "CCP_COMPARE_INT" 1 314 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 315 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 316 "0x0B"
d G "CCP_PWM" 1 317 "0x0C"
d G "CCP_PWM_PLUS_1" 1 318 "0x1c"
d G "CCP_PWM_PLUS_2" 1 319 "0x2c"
d G "CCP_PWM_PLUS_3" 1 320 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 1 329 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 1 330 "0x0100"
d G "CCP_PWM_H_H" 1 333 "0x0c"
d G "CCP_PWM_H_L" 1 334 "0x0d"
d G "CCP_PWM_L_H" 1 335 "0x0e"
d G "CCP_PWM_L_L" 1 336 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 338 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 339 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 340 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 342 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 343 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 344 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 345 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 346 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 347 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 348 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 350 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 351 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 352 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 354 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 355 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 356 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 358 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 360 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 361 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 362 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 363 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 364 "0x10000000"
d G "CCP_COMPLEMENTARY_AB" 1 365 "0x43000000"
d G "CCP_COMPLEMENTARY_AC" 1 366 "0x85000000"
d G "CCP_COMPLEMENTARY_AD" 1 367 "0xC9000000"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 371 "int32" `152 
f B "setup_ccp2" 1 371 "void(int32 mode)" `151 
v L "mode" 1 372 "int32" `154 
v L "pwm" 1 372 "int8" `155 
f G "setup_ccp2" 1 372 "void(int32 mode,int8 pwm)" `153 
v L "value" 1 373 "int16" `157 
f B "set_pwm2_duty" 1 373 "void(int16 value)" `156 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
v L "mode" 1 379 "int32" `162 
f B "setup_ccp3" 1 379 "void(int32 mode)" `161 
v L "mode" 1 380 "int32" `164 
v L "pwm" 1 380 "int8" `165 
f G "setup_ccp3" 1 380 "void(int32 mode,int8 pwm)" `163 
v L "value" 1 381 "int16" `167 
f B "set_pwm3_duty" 1 381 "void(int16 value)" `166 
c L "set_pwm3_duty" 1 1 1 "FUNCTION"
v L "mode" 1 387 "int32" `172 
f B "setup_ccp4" 1 387 "void(int32 mode)" `171 
v L "mode" 1 388 "int32" `174 
v L "pwm" 1 388 "int8" `175 
f G "setup_ccp4" 1 388 "void(int32 mode,int8 pwm)" `173 
v L "value" 1 389 "int16" `177 
f B "set_pwm4_duty" 1 389 "void(int16 value)" `176 
c L "set_pwm4_duty" 1 1 1 "FUNCTION"
v L "mode" 1 395 "int32" `182 
f B "setup_ccp5" 1 395 "void(int32 mode)" `181 
v L "mode" 1 396 "int32" `184 
v L "pwm" 1 396 "int8" `185 
f G "setup_ccp5" 1 396 "void(int32 mode,int8 pwm)" `183 
v L "value" 1 397 "int16" `187 
f B "set_pwm5_duty" 1 397 "void(int16 value)" `186 
c L "set_pwm5_duty" 1 1 3 "FUNCTION"
v L "mode" 1 404 "int32" `192 
f B "setup_spi" 1 404 "void(int32 mode)" `191 
v L "value" 1 405 "int8" `194 
f B "spi_write" 1 405 "void(int8 value)" `193 
f B "spi_read" 1 406 "int8()" `195 
v L "value" 1 407 "int8" `197 
f G "spi_read" 1 407 "int8(int8 value)" `196 
f B "spi_data_in" 1 408 "int8()" `198  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 410 "0x00"
d G "SPI_MASTER" 1 411 "0x20"
d G "SPI_SLAVE" 1 412 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 413 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 414 "0x00"
d G "SPI_CLK_DIV_4" 1 415 "0x00"
d G "SPI_CLK_DIV_16" 1 416 "0x01"
d G "SPI_CLK_DIV_64" 1 417 "0x02"
d G "SPI_CLK_T2" 1 418 "0x03"
d G "SPI_SS_DISABLED" 1 419 "0x01"
d G "SPI_XMIT_L_TO_H" 1 421 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 422 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 424 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 425 "0x8000"
d G "SPI_L_TO_H" 1 428 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 429 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
v L "baud" 1 433 "int32" `200 
f B "setup_uart" 1 433 "void(int32 baud)" `199 
v L "baud" 1 434 "int32" `202 
v L "stream" 1 434 "int8" `203 
f G "setup_uart" 1 434 "void(int32 baud,int8 stream)" `201 
v L "baud" 1 435 "int32" `205 
v L "stream" 1 435 "int8" `206 
v L "clock" 1 435 "int32" `207 
f G "setup_uart" 1 435 "void(int32 baud,int8 stream,int32 clock)" `204 
v L "baud" 1 436 "int32" `209 
f B "set_uart_speed" 1 436 "void(int32 baud)" `208 
v L "baud" 1 437 "int32" `211 
v L "stream" 1 437 "int8" `212 
f G "set_uart_speed" 1 437 "void(int32 baud,int8 stream)" `210 
v L "baud" 1 438 "int32" `214 
v L "stream" 1 438 "int8" `215 
v L "clock" 1 438 "int32" `216 
f G "set_uart_speed" 1 438 "void(int32 baud,int8 stream,int32 clock)" `213  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 442 "2"
d G "UART_DATA" 1 443 "4"
d G "UART_AUTODETECT" 1 444 "8"
d G "UART_AUTODETECT_NOWAIT" 1 445 "9"
d G "UART_WAKEUP_ON_RDA" 1 446 "10"
d G "UART_SEND_BREAK" 1 447 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
v L "mode" 1 451 "int32" `218 
f B "setup_comparator" 1 451 "void(int32 mode)" `217  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 454 "0x0404"
d G "NC_NC" 1 455 "0x0404"
d G "CP1_B1_B0" 1 458 "0x0080	"
d G "CP1_A5_B0" 1 459 "0x0082"
d G "CP1_VBG_B0" 1 460 "0x0083"
d G "CP1_B1_VREF" 1 461 "0x0084"
d G "CP1_A5_VREF" 1 462 "0x0086	"
d G "CP1_VBG_VREF" 1 463 "0x0087"
d G "CP1_OUT_ON_B2" 1 465 "0x0040"
d G "CP1_INVERT" 1 466 "0x0020"
d G "CP1_INT_L2H" 1 467 "0x0008"
d G "CP1_INT_H2L" 1 468 "0x0010"
d G "CP2_A5_B4" 1 471 "0x8000"
d G "CP2_B1_B4" 1 472 "0x8200"
d G "CP2_VBG_B4" 1 473 "0x8300"
d G "CP2_A5_VREF" 1 474 "0x8400"
d G "CP2_B1_VREF" 1 475 "0x8600"
d G "CP2_VBG_VREF" 1 476 "0x8700"
d G "CP2_OUT_ON_B3" 1 478 "0x4000"
d G "CP2_INVERT" 1 479 "0x2000"
d G "CP2_INT_L2H" 1 480 "0x0800"
d G "CP2_INT_H2L" 1 481 "0x1000"
c L "setup_comparator" 1 1 2 "FUNCTION"
v L "mode" 1 488 "int8" `222 
f B "setup_vref" 1 488 "void(int8 mode)" `221  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 490 "0"
d G "VREF_ON" 1 491 "0x80"
d G "VREF_EXT" 1 492 "0x20" "Range for ref gen VREF- to VREF+"
d G "VREF_OUT_A0" 1 493 "0x40"
c L "setup_vref" 1 1 3 "FUNCTION"
v L "mode" 1 498 "int8" `224 
f B "setup_low_volt_detect" 1 498 "void(int8 mode)" `223  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 500 "0x1F"
d G "LVD_45" 1 501 "0x1E"
d G "LVD_42" 1 502 "0x1D"
d G "LVD_40" 1 503 "0x1C"
d G "LVD_38" 1 504 "0x1B"
d G "LVD_36" 1 505 "0x1A"
d G "LVD_35" 1 506 "0x19"
d G "LVD_33" 1 507 "0x18"
d G "LVD_30" 1 508 "0x17"
d G "LVD_28" 1 509 "0x16"
d G "LVD_27" 1 510 "0x15"
d G "LVD_25" 1 511 "0x14"
d G "LVD_24" 1 512 "0x13"
d G "LVD_23" 1 513 "0x12"
d G "LVD_22" 1 514 "0x11"
d G "LVD_21" 1 515 "0x10"
d G "LVD_TRIGGER_BELOW" 1 517 "0"
d G "LVD_TRIGGER_ABOVE" 1 518 "0x80"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
v L "mode" 1 523 "int16" `226 
f B "setup_oscillator" 1 523 "int8(int16 mode)" `225 
v L "mode" 1 524 "int16" `228 
v L "tune" 1 524 "sint8" `229 
f G "setup_oscillator" 1 524 "int8(int16 mode,sint8 tune)" `227  "Constants used in setup_oscillator() are:"
d G "OSC_31250" 1 526 "0x8000"
d G "OSC_PLL_ON" 1 527 "0x4000"
d G "OSC_PLL_OFF" 1 528 "0"
d G "OSC_31KHZ" 1 529 "0"
d G "OSC_250KHZ" 1 530 "0x10"
d G "OSC_500KHZ" 1 531 "0x20"
d G "OSC_1MHZ" 1 532 "0x30"
d G "OSC_2MHZ" 1 533 "0x40"
d G "OSC_4MHZ" 1 534 "0x50"
d G "OSC_8MHZ" 1 535 "0x60"
d G "OSC_16MHZ" 1 536 "0x70"
d G "OSC_SOSC" 1 538 "1"
d G "OSC_INTRC" 1 539 "2"
d G "OSC_NORMAL" 1 540 "0"
d G "OSC_IDLE_MODE" 1 542 "0x80"
d G "OSC_MFINTRC_ON" 1 544 "0x10000" "MF-INTOSC used instead of HF-INTOSC for 500KHZ, 250KHZ and 31KHZ operating frequencies."
d G "OSC_SOSC_ON" 1 545 "0x80000"
d G "OSC_STATE_STABLE" 1 549 "4"
d G "OSC_STATE_PRIMARY_RUNNING" 1 550 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 557 "int16" `231 
f B "setup_adc" 1 557 "void(int16 mode)" `230 
f B "read_adc" 1 558 "int8()" `232 
v L "mode" 1 559 "int8" `234 
f G "read_adc" 1 559 "int8(int8 mode)" `233 
f G "read_adc" 1 560 "int16()" `235 
v L "mode" 1 561 "int8" `237 
f G "read_adc" 1 561 "int16(int8 mode)" `236 
f B "adc_done" 1 562 "int8()" `238  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 564 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 565 "0x100"
d G "ADC_CLOCK_DIV_4" 1 566 "0x04"
d G "ADC_CLOCK_DIV_8" 1 567 "0x01"
d G "ADC_CLOCK_DIV_16" 1 568 "0x05"
d G "ADC_CLOCK_DIV_32" 1 569 "0x02"
d G "ADC_CLOCK_DIV_64" 1 570 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 571 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 573 "0x00"
d G "ADC_TAD_MUL_2" 1 574 "0x08"
d G "ADC_TAD_MUL_4" 1 575 "0x10"
d G "ADC_TAD_MUL_6" 1 576 "0x18"
d G "ADC_TAD_MUL_8" 1 577 "0x20"
d G "ADC_TAD_MUL_12" 1 578 "0x28"
d G "ADC_TAD_MUL_16" 1 579 "0x30"
d G "ADC_TAD_MUL_20" 1 580 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
v L "pins" 1 583 "int32" `240 
f B "setup_adc_ports" 1 583 "void(int32 pins)" `239 
v L "pins" 1 584 "int32" `242 
v L "reference" 1 584 "int32" `243 
f G "setup_adc_ports" 1 584 "void(int32 pins,int32 reference)" `241 
v L "channel" 1 585 "int8" `245 
f B "set_adc_channel" 1 585 "void(int8 channel)" `244  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 589 "0x000100" "| A0"
d G "sAN1" 1 590 "0x000200" "| A1"
d G "sAN2" 1 591 "0x000400" "| A2"
d G "sAN3" 1 592 "0x000800" "| A3"
d G "sAN4" 1 593 "0x001000" "| A5"
d G "sAN8" 1 594 "0x010000" "| B1"
d G "sAN9" 1 595 "0x020000" "| B4"
d G "sAN10" 1 596 "0x040000" "| B0"
d G "NO_ANALOGS" 1 597 "0" "None"
d G "ALL_ANALOG" 1 598 "0x071F00" "A0 A1 A2 A3 A5 B1 B4 B0"
d G "VSS_VDD" 1 601 "0x00" "| Range 0-Vdd"
d G "VSS_VREF" 1 602 "0x10" "| Range 0-VrefH"
d G "VSS_2V048" 1 603 "0x20" "| Range 0-2.048V"
d G "VSS_4V096" 1 604 "0x30" "| Range 0-3.096V"
d G "VREF_VDD" 1 605 "0x08" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 606 "0x18" "| Range VrefL-VrefH"
d G "VREF_2V048" 1 607 "0x28" "| Range VrefL-2.048V"
d G "VREF_4V096" 1 608 "0x38" "| Range VrefL-4.096V"
d G "ADC_START_AND_READ" 1 611 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 612 "1"
d G "ADC_READ_ONLY" 1 613 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 619 "sint8" `247 
f B "abs" 1 619 "sint8(sint8 x)" `246 
v L "x" 1 620 "sint16" `249 
f G "abs" 1 620 "sint16(sint16 x)" `248 
v L "x" 1 621 "sint32" `251 
f G "abs" 1 621 "sint32(sint32 x)" `250 
v L "x" 1 622 "float" `253 
f G "abs" 1 622 "float(float x)" `252 
v L "??65535" 1 623 "int8" `255 
v L "??65535" 1 623 "int8" `256 
f B "_mul" 1 623 "int16(int8 ,int8 )" `254 
v L "??65535" 1 624 "sint8" `255 
v L "??65535" 1 624 "sint8" `259 
f G "_mul" 1 624 "sint16(sint8 ,sint8 )" `257 
v L "??65535" 1 625 "int16" `255 
v L "??65535" 1 625 "int16" `262 
f G "_mul" 1 625 "int32(int16 ,int16 )" `260 
v L "??65535" 1 626 "sint16" `255 
v L "??65535" 1 626 "sint16" `265 
f G "_mul" 1 626 "sint32(sint16 ,sint16 )" `263  "Memory Manipulation Prototypes:"
v L "bank" 1 629 "int8" `267 
v L "offset" 1 629 "int8" `268 
f B "read_bank" 1 629 "int8(int8 bank,int8 offset)" `266 
v L "bank" 1 630 "int8" `270 
v L "offset" 1 630 "int8" `271 
v L "value" 1 630 "int8" `272 
f B "write_bank" 1 630 "void(int8 bank,int8 offset,int8 value)" `269 
v L "dest" 1 631 "*int8" `274 
v L "src" 1 631 "*int8" `275 
f B "strcpy" 1 631 "void(*int8 dest,*int8 src)" `273 
v L "dest" 1 632 "*int8" `277 
v L "src" 1 632 "*int8" `278 
f B "strcopy" 1 632 "void(*int8 dest,*int8 src)" `276 
v L "destination" 1 633 "*int8" `280 
v L "value" 1 633 "int8" `281 
v L "num" 1 633 "int16" `282 
f B "memset" 1 633 "void(*int8 destination,int8 value,int16 num)" `279 
v L "destination" 1 634 "*int8" `284 
v L "source" 1 634 "*int8" `285 
v L "num" 1 634 "int16" `286 
f B "memcpy" 1 634 "void(*int8 destination,*int8 source,int16 num)" `283  "String Prototypes:"
v L "cvalue" 1 637 "int8" `288 
f B "toupper" 1 637 "int8(int8 cvalue)" `287 
v L "cvalue" 1 638 "int8" `290 
f B "tolower" 1 638 "int8(int8 cvalue)" `289 
v L "string" 1 639 "*int8" `292 
v L "cstring" 1 639 "*int8" `293 
f B "sprintf" 1 639 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `291  "Data Manipulators Prototypes:"
v L "address" 1 642 "*int8" `296 
v L "bytes" 1 642 "int8" `297 
v L "value" 1 642 "int8" `298 
f B "shift_left" 1 642 "int8(*int8 address,int8 bytes,int8 value)" `295 
v L "address" 1 643 "*int8" `300 
v L "bytes" 1 643 "int8" `301 
v L "value" 1 643 "int8" `302 
f B "shift_right" 1 643 "int8(*int8 address,int8 bytes,int8 value)" `299 
v L "address" 1 644 "*int8" `304 
v L "bytes" 1 644 "int8" `305 
f B "rotate_left" 1 644 "void(*int8 address,int8 bytes)" `303 
v L "address" 1 645 "*int8" `307 
v L "bytes" 1 645 "int8" `308 
f B "rotate_right" 1 645 "void(*int8 address,int8 bytes)" `306 
v L "value" 1 646 "int8" `310 
f B "swap" 1 646 "void(int8 value)" `309 
v L "var" 1 647 "int16" `312 
v L "offset" 1 647 "int8" `313 
f B "make8" 1 647 "int8(int16 var,int8 offset)" `311 
v L "var" 1 648 "int32" `312 
v L "offset" 1 648 "int8" `316 
f G "make8" 1 648 "int8(int32 var,int8 offset)" `314 
v L "varhigh" 1 649 "int8" `318 
v L "varlow" 1 649 "int8" `319 
f B "make16" 1 649 "int16(int8 varhigh,int8 varlow)" `317 
v L "var1" 1 650 "int16" `321 
f B "make32" 1 650 "int32(int16 var1)" `320 
v L "var1" 1 651 "int16" `323 
v L "var2" 1 651 "int16" `324 
f G "make32" 1 651 "int32(int16 var1,int16 var2)" `322 
v L "var1" 1 652 "int16" `323 
v L "var2" 1 652 "int8" `327 
f G "make32" 1 652 "int32(int16 var1,int8 var2)" `325 
v L "var1" 1 653 "int16" `329 
v L "var2" 1 653 "int8" `330 
v L "var3" 1 653 "int8" `331 
f G "make32" 1 653 "int32(int16 var1,int8 var2,int8 var3)" `328 
v L "var1" 1 654 "int8" `333 
f G "make32" 1 654 "int32(int8 var1)" `332 
v L "var1" 1 655 "int8" `323 
v L "var2" 1 655 "int8" `336 
f G "make32" 1 655 "int32(int8 var1,int8 var2)" `334 
v L "var1" 1 656 "int8" `329 
v L "var2" 1 656 "int8" `330 
v L "var3" 1 656 "int8" `340 
f G "make32" 1 656 "int32(int8 var1,int8 var2,int8 var3)" `337 
v L "var1" 1 657 "int8" `342 
v L "var2" 1 657 "int8" `343 
v L "var3" 1 657 "int8" `344 
v L "var4" 1 657 "int8" `345 
f G "make32" 1 657 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `341 
v L "var1" 1 658 "int8" `323 
v L "var2" 1 658 "int16" `348 
f G "make32" 1 658 "int32(int8 var1,int16 var2)" `346 
v L "var1" 1 659 "int8" `329 
v L "var2" 1 659 "int16" `330 
v L "var3" 1 659 "int8" `352 
f G "make32" 1 659 "int32(int8 var1,int16 var2,int8 var3)" `349 
v L "var1" 1 660 "int8" `329 
v L "var2" 1 660 "int8" `330 
v L "var3" 1 660 "int16" `356 
f G "make32" 1 660 "int32(int8 var1,int8 var2,int16 var3)" `353 
v L "var" 1 661 "int8" `358 
v L "bit" 1 661 "int8" `359 
f B "bit_set" 1 661 "void(int8 var,int8 bit)" `357 
v L "var" 1 662 "int16" `358 
v L "bit" 1 662 "int8" `362 
f G "bit_set" 1 662 "void(int16 var,int8 bit)" `360 
v L "var" 1 663 "int32" `358 
v L "bit" 1 663 "int8" `365 
f G "bit_set" 1 663 "void(int32 var,int8 bit)" `363 
v L "var" 1 664 "int8" `367 
v L "bit" 1 664 "int8" `368 
f B "bit_clear" 1 664 "void(int8 var,int8 bit)" `366 
v L "var" 1 665 "int16" `367 
v L "bit" 1 665 "int8" `371 
f G "bit_clear" 1 665 "void(int16 var,int8 bit)" `369 
v L "var" 1 666 "int32" `367 
v L "bit" 1 666 "int8" `374 
f G "bit_clear" 1 666 "void(int32 var,int8 bit)" `372 
v L "var" 1 667 "int8" `376 
v L "bit" 1 667 "int8" `377 
f B "bit_test" 1 667 "int8(int8 var,int8 bit)" `375 
v L "var" 1 668 "int16" `376 
v L "bit" 1 668 "int8" `380 
f G "bit_test" 1 668 "int8(int16 var,int8 bit)" `378 
v L "var" 1 669 "int32" `376 
v L "bit" 1 669 "int8" `383 
f G "bit_test" 1 669 "int8(int32 var,int8 bit)" `381  "#use delay() Prototypes:"
v L "count" 1 672 "int8" `385 
f B "delay_cycles" 1 672 "void(int8 count)" `384 
v L "time" 1 673 "int16" `387 
f B "delay_ms" 1 673 "void(int16 time)" `386 
v L "time" 1 674 "int16" `389 
f B "delay_us" 1 674 "void(int16 time)" `388  "#use rs232() Prototypes:"
v L "cdata" 1 677 "int8" `391 
f B "putchar" 1 677 "void(int8 cdata)" `390 
v L "cdata" 1 678 "int8" `393 
v L "stream" 1 678 "int8" `394 
f G "putchar" 1 678 "void(int8 cdata,int8 stream)" `392 
v L "string" 1 679 "*int8" `396 
f B "puts" 1 679 "void(*int8 string)" `395 
v L "string" 1 680 "*int8" `398 
v L "stream" 1 680 "int8" `399 
f G "puts" 1 680 "void(*int8 string,int8 stream)" `397 
f B "getch" 1 681 "int8()" `400 
v L "stream" 1 682 "int8" `402 
f G "getch" 1 682 "int8(int8 stream)" `401 
v L "string" 1 683 "*int8" `404 
f B "gets" 1 683 "void(*int8 string)" `403 
v L "string" 1 684 "*int8" `406 
v L "stream" 1 684 "int8" `407 
f G "gets" 1 684 "void(*int8 string,int8 stream)" `405 
f B "kbhit" 1 685 "int8()" `408 
v L "stream" 1 686 "int8" `410 
f G "kbhit" 1 686 "int8(int8 stream)" `409 
v L "string" 1 687 "*int8" `412 
f B "printf" 1 687 "void(*int8 string,*int8 _VA_LIST)" `411 
v L "stream" 1 688 "int8" `415 
v L "string" 1 688 "*int8" `416 
f B "fprintf" 1 688 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `414 
f B "putc_send" 1 689 "void()" `418 
v L "stream" 1 690 "int8" `420 
f B "fputc_send" 1 690 "void(int8 stream)" `419 
f B "rcv_buffer_full" 1 691 "int8()" `421 
v L "stream" 1 692 "int8" `423 
f G "rcv_buffer_full" 1 692 "int8(int8 stream)" `422 
f B "rcv_buffer_bytes" 1 693 "int16()" `424 
v L "stream" 1 694 "int8" `426 
f G "rcv_buffer_bytes" 1 694 "int16(int8 stream)" `425 
f B "tx_buffer_full" 1 695 "int8()" `427 
v L "stream" 1 696 "int8" `429 
f G "tx_buffer_full" 1 696 "int8(int8 stream)" `428 
f B "tx_buffer_bytes" 1 697 "int16()" `430 
v L "stream" 1 698 "int8" `432 
f G "tx_buffer_bytes" 1 698 "int16(int8 stream)" `431  "#use i2c() Prototypes:"
f B "i2c_read" 1 701 "int8()" `433 
v L "stream" 1 702 "int8" `435 
f G "i2c_read" 1 702 "int8(int8 stream)" `434 
v L "stream" 1 703 "int8" `437 
v L "ack" 1 703 "int8" `438 
f G "i2c_read" 1 703 "int8(int8 stream,int8 ack)" `436 
v L "data" 1 704 "int8" `440 
f B "i2c_write" 1 704 "int8(int8 data)" `439 
v L "stream" 1 705 "int8" `442 
v L "data" 1 705 "int8" `443 
f G "i2c_write" 1 705 "int8(int8 stream,int8 data)" `441 
f B "i2c_start" 1 706 "void()" `444 
v L "stream" 1 707 "int8" `446 
f G "i2c_start" 1 707 "void(int8 stream)" `445 
v L "stream" 1 708 "int8" `448 
v L "restart" 1 708 "int8" `449 
f G "i2c_start" 1 708 "void(int8 stream,int8 restart)" `447 
f B "i2c_stop" 1 709 "void()" `450 
v L "stream" 1 710 "int8" `452 
f G "i2c_stop" 1 710 "void(int8 stream)" `451 
f B "i2c_isr_state" 1 711 "int8()" `453 
v L "addr" 1 712 "int8" `455 
f B "i2c_slaveaddr" 1 712 "void(int8 addr)" `454 
v L "stream" 1 713 "int8" `457 
v L "addr" 1 713 "int8" `458 
f G "i2c_slaveaddr" 1 713 "void(int8 stream,int8 addr)" `456 
f B "i2c_poll" 1 714 "int8()" `459 
v L "stream" 1 715 "int8" `461 
f G "i2c_poll" 1 715 "int8(int8 stream)" `460 
v L "baud" 1 716 "int32" `463 
f B "i2c_init" 1 716 "void(int32 baud)" `462 
v L "stream" 1 717 "int8" `465 
v L "baud" 1 717 "int32" `466 
f G "i2c_init" 1 717 "void(int8 stream,int32 baud)" `464  "#use spi() Prototypes:"
f B "spi_xfer" 1 720 "int8()" `467 
f G "spi_xfer" 1 721 "int16()" `468 
f G "spi_xfer" 1 722 "int32()" `469 
v L "data" 1 723 "int8" `471 
f G "spi_xfer" 1 723 "int8(int8 data)" `470 
v L "data" 1 724 "int16" `473 
f G "spi_xfer" 1 724 "int16(int16 data)" `472 
v L "data" 1 725 "int32" `475 
f G "spi_xfer" 1 725 "int32(int32 data)" `474 
v L "stream" 1 726 "int8" `477 
v L "data" 1 726 "int8" `478 
f G "spi_xfer" 1 726 "int8(int8 stream,int8 data)" `476 
v L "stream" 1 727 "int8" `477 
v L "data" 1 727 "int16" `481 
f G "spi_xfer" 1 727 "int16(int8 stream,int16 data)" `479 
v L "stream" 1 728 "int8" `477 
v L "data" 1 728 "int32" `484 
f G "spi_xfer" 1 728 "int32(int8 stream,int32 data)" `482 
v L "stream" 1 729 "int8" `486 
v L "data" 1 729 "int8" `487 
v L "bits" 1 729 "int8" `488 
f G "spi_xfer" 1 729 "int8(int8 stream,int8 data,int8 bits)" `485 
v L "stream" 1 730 "int8" `486 
v L "data" 1 730 "int16" `487 
v L "bits" 1 730 "int8" `492 
f G "spi_xfer" 1 730 "int16(int8 stream,int16 data,int8 bits)" `489 
v L "stream" 1 731 "int8" `486 
v L "data" 1 731 "int32" `487 
v L "bits" 1 731 "int8" `496 
f G "spi_xfer" 1 731 "int32(int8 stream,int32 data,int8 bits)" `493 
v L "baud" 1 732 "int32" `498 
f B "spi_init" 1 732 "void(int32 baud)" `497 
v L "stream" 1 733 "int8" `500 
v L "baud" 1 733 "int32" `501 
f G "spi_init" 1 733 "void(int8 stream,int32 baud)" `499 
v L "baud" 1 734 "int32" `503 
f B "spi_speed" 1 734 "void(int32 baud)" `502 
v L "stream" 1 735 "int8" `505 
v L "baud" 1 735 "int32" `506 
f G "spi_speed" 1 735 "void(int8 stream,int32 baud)" `504 
v L "stream" 1 736 "int8" `508 
v L "baud" 1 736 "int32" `509 
v L "clock" 1 736 "int32" `510 
f G "spi_speed" 1 736 "void(int8 stream,int32 baud,int32 clock)" `507 
v L "data" 1 737 "int8" `512 
f B "spi_prewrite" 1 737 "void(int8 data)" `511 
v L "data" 1 738 "int16" `514 
f G "spi_prewrite" 1 738 "void(int16 data)" `513 
v L "data" 1 739 "int32" `516 
f G "spi_prewrite" 1 739 "void(int32 data)" `515 
v L "??65535" 1 740 "int8" `518 
v L "data" 1 740 "int8" `519 
f G "spi_prewrite" 1 740 "void(int8 ,int8 data)" `517 
v L "??65535" 1 741 "int8" `518 
v L "data" 1 741 "int16" `522 
f G "spi_prewrite" 1 741 "void(int8 ,int16 data)" `520 
v L "??65535" 1 742 "int8" `518 
v L "data" 1 742 "int32" `525 
f G "spi_prewrite" 1 742 "void(int8 ,int32 data)" `523 
f B "spi_xfer_in" 1 743 "int8()" `526 
f G "spi_xfer_in" 1 744 "int16()" `527 
f G "spi_xfer_in" 1 745 "int32()" `528 
v L "bits" 1 746 "int8" `530 
f G "spi_xfer_in" 1 746 "int8(int8 bits)" `529 
v L "bits" 1 747 "int8" `532 
f G "spi_xfer_in" 1 747 "int16(int8 bits)" `531 
v L "bits" 1 748 "int8" `534 
f G "spi_xfer_in" 1 748 "int32(int8 bits)" `533 
v L "stream" 1 749 "int8" `536 
v L "bits" 1 749 "int8" `537 
f G "spi_xfer_in" 1 749 "int8(int8 stream,int8 bits)" `535 
v L "stream" 1 750 "int8" `536 
v L "bits" 1 750 "int8" `540 
f G "spi_xfer_in" 1 750 "int16(int8 stream,int8 bits)" `538 
v L "stream" 1 751 "int8" `536 
v L "bits" 1 751 "int8" `543 
f G "spi_xfer_in" 1 751 "int32(int8 stream,int8 bits)" `541  "#use rtos() Prototypes:"
f B "rtos_run" 1 754 "void()" `544 
f B "rtos_yield" 1 755 "void()" `545 
v L "task" 1 756 "int8" `547 
f B "rtos_enable" 1 756 "void(int8 task)" `546 
v L "task" 1 757 "int8" `549 
f B "rtos_disable" 1 757 "void(int8 task)" `548 
f B "rtos_terminate" 1 758 "void()" `550 
v L "flag" 1 759 "int8" `552 
f B "rtos_await" 1 759 "void(int8 flag)" `551 
v L "sem" 1 760 "int8" `554 
f B "rtos_wait" 1 760 "void(int8 sem)" `553 
v L "sem" 1 761 "int8" `556 
f B "rtos_signal" 1 761 "void(int8 sem)" `555 
v L "task" 1 762 "int8" `558 
v L "msg" 1 762 "int8" `559 
f B "rtos_msg_send" 1 762 "void(int8 task,int8 msg)" `557 
f B "rtos_msg_read" 1 763 "int8()" `560 
f B "rtos_msg_poll" 1 764 "int8()" `561 
v L "task" 1 765 "int8" `563 
f B "rtos_overrun" 1 765 "int8(int8 task)" `562 
v L "task" 1 766 "int8" `565 
v L "stat" 1 766 "*int8" `566 
f B "rtos_stats" 1 766 "void(int8 task,*int8 stat)" `564  "#use timer() Prototypes:"
f B "get_ticks" 1 769 "int8()" `567 
f G "get_ticks" 1 770 "int16()" `568 
f G "get_ticks" 1 771 "int32()" `569 
v L "stream" 1 772 "int8" `571 
f G "get_ticks" 1 772 "int8(int8 stream)" `570 
v L "stream" 1 773 "int8" `573 
f G "get_ticks" 1 773 "int16(int8 stream)" `572 
v L "stream" 1 774 "int8" `575 
f G "get_ticks" 1 774 "int32(int8 stream)" `574 
v L "value" 1 775 "int8" `577 
f B "set_ticks" 1 775 "void(int8 value)" `576 
v L "value" 1 776 "int16" `579 
f G "set_ticks" 1 776 "void(int16 value)" `578 
v L "value" 1 777 "int32" `581 
f G "set_ticks" 1 777 "void(int32 value)" `580 
v L "stream" 1 778 "int8" `583 
v L "value" 1 778 "int8" `584 
f G "set_ticks" 1 778 "void(int8 stream,int8 value)" `582 
v L "stream" 1 779 "int8" `583 
v L "value" 1 779 "int16" `587 
f G "set_ticks" 1 779 "void(int8 stream,int16 value)" `585 
v L "stream" 1 780 "int8" `583 
v L "value" 1 780 "int32" `590 
f G "set_ticks" 1 780 "void(int8 stream,int32 value)" `588  "#use pwm() Prototypes:"
f B "pwm_on" 1 783 "void()" `591 
v L "stream" 1 784 "int8" `593 
f G "pwm_on" 1 784 "void(int8 stream)" `592 
f B "pwm_off" 1 785 "void()" `594 
v L "stream" 1 786 "int8" `596 
f G "pwm_off" 1 786 "void(int8 stream)" `595 
v L "duty" 1 787 "int16" `598 
f B "pwm_set_duty" 1 787 "void(int16 duty)" `597 
v L "stream" 1 788 "int8" `600 
v L "duty" 1 788 "int16" `601 
f G "pwm_set_duty" 1 788 "void(int8 stream,int16 duty)" `599 
v L "percent" 1 789 "int16" `603 
f B "pwm_set_duty_percent" 1 789 "void(int16 percent)" `602 
v L "stream" 1 790 "int8" `605 
v L "percent" 1 790 "int16" `606 
f G "pwm_set_duty_percent" 1 790 "void(int8 stream,int16 percent)" `604 
v L "frequency" 1 791 "int32" `608 
f B "pwm_set_frequency" 1 791 "void(int32 frequency)" `607 
v L "stream" 1 792 "int8" `610 
v L "frequency" 1 792 "int32" `611 
f G "pwm_set_frequency" 1 792 "void(int8 stream,int32 frequency)" `609  "#use capture() Prototypes:"
f B "get_capture_time" 1 795 "int16()" `612 
v L "stream" 1 796 "int8" `614 
f G "get_capture_time" 1 796 "int16(int8 stream)" `613 
f B "get_capture_event" 1 797 "int8()" `615 
v L "stream" 1 798 "int8" `617 
f G "get_capture_event" 1 798 "int8(int8 stream)" `616  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 811 "int16" `619 
f B "goto_address" 1 811 "void(int16 address)" `618 
v L "label" 1 812 "int16" `621 
f B "label_address" 1 812 "int16(int16 label)" `620  "Program Memory Prototypes:"
v L "address" 1 815 "int16" `623 
v L "dataptr" 1 815 "*int8" `624 
v L "count" 1 815 "int16" `625 
f B "read_program_memory" 1 815 "void(int16 address,*int8 dataptr,int16 count)" `622 
v L "address" 1 816 "int16" `627 
f B "read_program_eeprom" 1 816 "int16(int16 address)" `626 
v L "address" 1 817 "int16" `629 
f B "erase_program_eeprom" 1 817 "void(int16 address)" `628 
v L "address" 1 818 "int16" `631 
v L "dataptr" 1 818 "*int8" `632 
v L "count" 1 818 "int16" `633 
f B "write_program_memory" 1 818 "void(int16 address,*int8 dataptr,int16 count)" `630 
v L "address" 1 819 "int16" `635 
v L "data" 1 819 "int16" `636 
f B "write_program_eeprom" 1 819 "void(int16 address,int16 data)" `634  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 824 "int16" `637 
v L "address" 1 829 "__EEADDRESS__" `639 
f B "read_eeprom" 1 829 "int8(__EEADDRESS__ address)" `638 
v L "address" 1 830 "__EEADDRESS__" `641 
v L "value" 1 830 "int8" `642 
f B "write_eeprom" 1 830 "void(__EEADDRESS__ address,int8 value)" `640  "#use touchpad() Prototypes:"
v L "state" 1 833 "int8" `644 
f B "touchpad_state" 1 833 "void(int8 state)" `643 
f B "touchpad_getc" 1 834 "int8()" `645 
f B "touchpad_hit" 1 835 "int8()" `646  "INT"
c L "touchpad_hit" 1 1 4 "FUNCTION"
v L "interrupt" 1 841 "int32" `648 
f B "enable_interrupts" 1 841 "void(int32 interrupt)" `647 
v L "interrupt" 1 842 "int32" `650 
f B "disable_interrupts" 1 842 "void(int32 interrupt)" `649 
v L "interrupt" 1 843 "int32" `652 
f B "clear_interrupt" 1 843 "void(int32 interrupt)" `651 
v L "interrupt" 1 844 "int32" `654 
f B "interrupt_active" 1 844 "int8(int32 interrupt)" `653 
v L "interrupt" 1 845 "int32" `656 
f B "interrupt_enabled" 1 845 "int8(int32 interrupt)" `655 
v L "source" 1 846 "int8" `658 
v L "edge" 1 846 "int8" `659 
f B "ext_int_edge" 1 846 "void(int8 source,int8 edge)" `657 
v L "address" 1 847 "int16" `661 
f B "jump_to_isr" 1 847 "void(int16 address)" `660  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 849 "0x40"
d G "H_TO_L" 1 850 "0"
d G "GLOBAL" 1 852 "0xF2C0"
d G "PERIPH" 1 853 "0xF240"
d G "INT_RTCC" 1 854 "0x00F220"
d G "INT_TIMER0" 1 855 "0x00F220"
d G "INT_TIMER1" 1 856 "0x009D01"
d G "INT_TIMER2" 1 857 "0x009D02"
d G "INT_TIMER3" 1 858 "0x00A002"
d G "INT_EXT_L2H" 1 859 "0x5000F210"
d G "INT_EXT_H2L" 1 860 "0x6000F210"
d G "INT_EXT" 1 861 "0x00F210"
d G "INT_EXT1_L2H" 1 862 "0x5001F008"
d G "INT_EXT1_H2L" 1 863 "0x6001F008"
d G "INT_EXT1" 1 864 "0x00F008"
d G "INT_EXT2_L2H" 1 865 "0x5002F010"
d G "INT_EXT2_H2L" 1 866 "0x6002F010"
d G "INT_EXT2" 1 867 "0x00F010"
d G "INT_RB" 1 868 "0x01FFF208"
d G "INT_AD" 1 869 "0x009D40"
d G "INT_RDA" 1 870 "0x009D20"
d G "INT_TBE" 1 871 "0x009D10"
d G "INT_SSP" 1 872 "0x009D08"
d G "INT_BUSCOL" 1 873 "0x00A008"
d G "INT_RDA2" 1 874 "0x00A320"
d G "INT_TBE2" 1 875 "0x00A310"
d G "INT_OSCF" 1 876 "0x00A080"
d G "INT_HLVD" 1 877 "0x00A004"
d G "INT_EXT3_L2H" 1 878 "0x5003F020"
d G "INT_EXT3_H2L" 1 879 "0x6003F020"
d G "INT_EXT3" 1 880 "0x00F020"
d G "INT_CCP1" 1 881 "0x00A302"
d G "INT_CCP2" 1 882 "0x00A304"
d G "INT_CTMU" 1 883 "0x00A308"
d G "INT_TMR1G" 1 884 "0x009D04"
d G "INT_TMR3G" 1 885 "0x00A001"
d G "INT_CCP3" 1 886 "0x00B601"
d G "INT_CCP4" 1 887 "0x00B602"
d G "INT_CCP5" 1 888 "0x00B604"
d G "INT_COMP1" 1 889 "0x00B610"
d G "INT_COMP2" 1 890 "0x00B620"
d G "INT_EEPROM" 1 891 "0x00B640"
d G "INT_TIMER4" 1 892 "0x00B680"
d G "INT_CANRX0" 1 893 "0x007601"
d G "INT_CANRX1" 1 894 "0x007602"
d G "INT_CANTX0" 1 895 "0x007604"
d G "INT_CANTX1" 1 896 "0x007608"
d G "INT_CANTX2" 1 897 "0x007610"
d G "INT_CANERR" 1 898 "0x007620"
d G "INT_CANWAKE" 1 899 "0x007640"
d G "INT_CANIRX" 1 900 "0x007680"
d G "INT_RB4" 1 901 "0x110F208"
d G "INT_RB5" 1 902 "0x120F208"
d G "INT_RB6" 1 903 "0x140F208"
d G "INT_RB7" 1 904 "0x180F208"
D G "CAN_USE_EXTENDED_ID" 0 19 "FALSE"
D G "CAN_BRG_SEG_2_PHASE_TS" 0 20 "TRUE"
D G "CAN_BRG_PRESCALAR" 0 21 "1"
D G "CAN_BRG_SYNCH_JUMP_WIDTH" 0 22 "0"
D G "CAN_BRG_PROPAGATION_TIME" 0 23 "7"
D G "CAN_BRG_PHASE_SEGMENT_1" 0 24 "0"
D G "CAN_BRG_PHASE_SEGMENT_2" 0 25 "5"
D G "CAN_BRG_WAKE_FILTER" 0 26 "TRUE"
D G "CAN_BRG_SAM" 0 27 "FALSE"
C L "jump_to_isr" 2 2 120 "FUNCTION"
D G "__CCS_CAN18F4580_LIB_DEFINES__" 3 20 ""
D G "CAN_DO_DEBUG" 3 23 "FALSE"
D G "CAN_USE_RX_DOUBLE_BUFFER" 3 63 "TRUE" "if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data"
D G "CAN_ENABLE_DRIVE_HIGH" 3 67 "0"
D G "CAN_ENABLE_CAN_CAPTURE" 3 71 "0"
D G "CAN_ENABLE_CANTX2" 3 75 "0" "0 CANTX2 disabled, 1 CANTX2 enabled"
D G "CAN_CANTX2_SOURCE" 3 79 "0" "0 source is invert of CANTX1, 1 source is CAN Clock"
C L "jump_to_isr" 3 2 1 "FUNCTION"
E G "CAN_OP_CONFIG" 3 87 "4" `667 
E G "CAN_OP_LISTEN" 3 88 "3" `668 
E G "CAN_OP_LOOPBACK" 3 89 "2" `669 
E G "CAN_OP_DISABLE" 3 90 "1" `670 
E G "CAN_OP_NORMAL" 3 90 "0" `671 
E G "CAN_FUN_OP_LEGACY" 3 93 "0" `673 
E G "CAN_FUN_OP_ENHANCED" 3 94 "1" `674 
E G "CAN_FUN_OP_ENHANCED_FIFO" 3 94 "2" `675 
E G "CAN_WIN_RX0" 3 97 "0" `677 
E G "CAN_WIN_RX1" 3 98 "5" `678 
E G "CAN_WIN_TX0" 3 99 "4" `679 
E G "CAN_WIN_TX1" 3 100 "3" `680 
E G "CAN_WIN_TX2" 3 100 "2" `681 
E G "CAN_FIFO_MB7" 3 103 "7" `683 
E G "CAN_FIFO_MB6" 3 104 "6" `684 
E G "CAN_FIFO_MB5" 3 105 "5" `685 
E G "CAN_FIFO_MB4" 3 106 "4" `686 
E G "CAN_FIFO_MB3" 3 107 "3" `687 
E G "CAN_FIFO_MB2" 3 108 "2" `688 
E G "CAN_FIFO_MB1" 3 109 "1" `689 
E G "CAN_FIFO_MB0" 3 109 "0" `690  "Control register configurations for modes 0, 1, and 2"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CANCON" 3 118 "{int1 void0,int3 win,int1 abat,int3 reqop}" `696 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CANCON_MODE_1" 3 126 "{int4 void3210,int1 abat,int3 reqop}" `701 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CANCON_MODE_2" 3 134 "{int4 fp,int1 abat,int3 reqop}" `706 
C L "jump_to_isr" 3 2 2 "FUNCTION"
E G "ECAN_LEGACY" 3 142 "0" `708 
E G "ECAN_ENHANCED_LEGACY" 3 142 "1" `709 
E G "ECAN_ENHANCED_FIFO" 3 142 "2" `710 
E G "AF012_BRGCON23" 3 144 "0" `712 
E G "AF345_BRGCON1_" 3 145 "1" `713 
E G "AFM_ERROR_ICON" 3 146 "2" `714 
E G "TX0" 3 147 "3" `715 
E G "TX1" 3 148 "4" `716 
E G "TX2" 3 149 "5" `717 
E G "AF678" 3 150 "6" `718 
E G "AccF91011" 3 151 "7" `719 
E G "AccF121314" 3 152 "8" `720 
E G "AccF15" 3 153 "9" `721 
E G "RXINT01" 3 154 "15" `722 
E G "RX0" 3 155 "16" `723 
E G "RX1" 3 156 "17" `724 
E G "TXRX0" 3 157 "18" `725 
E G "TXRX1" 3 158 "19" `726 
E G "TXRX2" 3 159 "20" `727 
E G "TXRX3" 3 160 "21" `728 
E G "TXRX4" 3 161 "22" `729 
E G "TXRX5" 3 161 "23" `730  "ecan control register mode 1, 2, & 3"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "ECANCON" 3 168 "{int5 ewin,int1 fifowm,int2 mdsel}" `735 
C L "jump_to_isr" 3 2 2 "FUNCTION"
E G "CAN_INT_WAKEUP" 3 178 "7" `737 
E G "CAN_INT_RX0" 3 179 "6" `738 
E G "CAN_INT_RX1" 3 180 "5" `739 
E G "CAN_INT_TX0" 3 181 "4" `740 
E G "CAN_INT_TX1" 3 182 "3" `741 
E G "CAN_INT_TX2" 3 183 "2" `742 
E G "CAN_INT_ERROR" 3 184 "1" `743 
E G "CAN_INT_NO" 3 184 "0" `744 
E G "CAN_EINT_NO" 3 187 "0" `746 
E G "CAN_EINT_ERROR" 3 188 "2" `747 
E G "CAN_EINT_TX2" 3 189 "4" `748 
E G "CAN_EINT_TX1" 3 190 "6" `749 
E G "CAN_EINT_TX0" 3 191 "8" `750 
E G "CAN_EINT_RX1" 3 192 "17" `751 
E G "CAN_EINT_RX0" 3 193 "16" `752 
E G "CAN_EINT_WAKEUP" 3 194 "14" `753 
E G "CAN_EINT_RXB0" 3 195 "16" `754 
E G "CAN_EINT_RXB1" 3 196 "17" `755 
E G "CAN_EINT_B0" 3 197 "18" `756 
E G "CAN_EINT_B1" 3 198 "19" `757 
E G "CAN_EINT_B2" 3 199 "20" `758 
E G "CAN_EINT_B3" 3 200 "21" `759 
E G "CAN_EINT_B4" 3 201 "22" `760 
E G "CAN_EINT_B5" 3 201 "23" `761  "can status register READ-ONLY"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CANSTAT" 3 209 "{int1 void0,int3 icode,int1 void4,int3 opmode}" `767 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CANSTAT_MODE_1" 3 216 "{int5 eicode,int3 opmode}" `771 
C L "jump_to_isr" 3 2 2 "FUNCTION"
V G "CANSTAT_MODE_2" 3 223 "{int5 eicode,int3 opmode}" `775 
C L "jump_to_isr" 3 2 3 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "COMSTAT" 3 242 "{int1 ewarn,int1 rxwarn,int1 txwarn,int1 rxbp,int1 txbp,int1 txbo,int1 rx1ovfl,int1 rx0ovfl}" `785 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "COMSTAT_MODE_1" 3 255 "{int1 ewarn,int1 rxwarn,int1 txwarn,int1 rxbp,int1 txbp,int1 txbo,int1 rxnovfl,int1 void7}" `795 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "COMSTAT_MODE_2" 3 268 "{int1 ewarn,int1 rxwarn,int1 txwarn,int1 rxbp,int1 txbp,int1 txbo,int1 rxnovfl,int1 fifoempty}" `805 
C L "jump_to_isr" 3 2 3 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "BRGCON1" 3 280 "{int6 brp,int2 sjw}" `809 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "BRGCON2" 3 289 "{int3 prseg,int3 seg1ph,int1 sam,int1 seg2phts}" `815 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "BRGCON3" 3 298 "{int3 seg2ph,int3 void543,int1 wakfil,int1 void7}" `821 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "CIOCON" 3 310 "{int4 void3210,int1 cancap,int1 endrhi,int1 tx2en,int1 tx2src}" `828 
C L "jump_to_isr" 3 2 3 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "TXB0CON" 3 327 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `837 
V G "TXB1CON" 3 328 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `838 
V G "TXB2CON" 3 329 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `839 
V G "TXBaCON" 3 330 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 void7}" `840 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "TXB0CON_MODE_1" 3 347 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `849 
V G "TXB0CON_MODE_2" 3 348 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `850 
V G "TXB1CON_MODE_1" 3 349 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `851 
V G "TXB1CON_MODE_2" 3 350 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `852 
V G "TXB2CON_MODE_1" 3 351 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `853 
V G "TXB2CON_MODE_2" 3 352 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `854 
V G "TXBaCON_MODE_1" 3 353 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `855 
V G "TXBaCON_MODE_2" 3 354 "{int2 txpri,int1 void2,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `856 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
D G "RX0MASK" 3 382 "getenv("SFR:RXM0EIDL")" "0xF1B    //rxm0eidl"
D G "RX1MASK" 3 383 "getenv("SFR:RXM1EIDL")" "0xF1F    //rxm1eidl"
D G "RX0FILTER0" 3 384 "getenv("SFR:RXF0EIDL")" "0xF03    //rxf0eidl"
D G "RX0FILTER1" 3 385 "getenv("SFR:RXF1EIDL")" "0xF07    //rxf1eidl"
D G "RX1FILTER2" 3 386 "getenv("SFR:RXF2EIDL")" "0xF0B    //rxf2eidl"
D G "RX1FILTER3" 3 387 "getenv("SFR:RXF3EIDL")" "0xF0F    //rxf3eidl"
D G "RX1FILTER4" 3 388 "getenv("SFR:RXF4EIDL")" "0xF13    //rxf4eidl"
D G "RX1FILTER5" 3 389 "getenv("SFR:RXF5EIDL")" "0xF17    //rxf5eidl"
D G "RXB0ID" 3 390 "getenv("SFR:RXB0EIDL")" "0xF64    //rxb0eidl"
D G "RXB1ID" 3 391 "getenv("SFR:RXB1EIDL")" "0xF54    //rxb1eidl"
D G "TXB0ID" 3 392 "getenv("SFR:TXB0EIDL")" "0xF44    //txb0eidl"
D G "TXB1ID" 3 393 "getenv("SFR:TXB1EIDL")" "0xF34    //txb1eidl"
D G "TXB2ID" 3 394 "getenv("SFR:TXB2EIDL")" "0xF24    //txb2eidl"
D G "B0ID" 3 395 "getenv("SFR:B0EIDL")" "0xE24    //b0eidl"
D G "B1ID" 3 396 "getenv("SFR:B1EIDL")" "0xE34    //b1eidl"
D G "B2ID" 3 397 "getenv("SFR:B2EIDL")" "0xE44    //b2eidl"
D G "B3ID" 3 398 "getenv("SFR:B3EIDL")" "0xE54    //b3eidl"
D G "B4ID" 3 399 "getenv("SFR:B4EIDL")" "0xE64    //b4eidl"
D G "B5ID" 3 400 "getenv("SFR:B5EIDL")" "0xE74    //b5eidl"
D G "TXRXBaID" 3 401 "0xF64"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "TXB0DLC" 3 418 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `880 
V G "TXB1DLC" 3 419 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `881 
V G "TXB2DLC" 3 420 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `882 
V G "TXBaDLC" 3 421 "{int4 dlc,int2 void54,int1 rtr,int1 void7}" `883 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
E G "CAN_RX_ALL" 3 436 "3" `886 
E G "CAN_RX_EXT" 3 436 "2" `887 
E G "CAN_RX_STD" 3 436 "1" `888 
E G "CAN_RX_VALID" 3 436 "0" `889 
E G "RXF0" 3 437 "0" `891 
E G "RXF1" 3 437 "1" `892 
E G "RXF2" 3 437 "2" `893 
E G "RXF3" 3 437 "3" `894 
E G "RXF4" 3 437 "4" `895 
E G "RXF5" 3 438 "5" `896 
E G "RXF6" 3 438 "6" `897 
E G "RXF7" 3 438 "7" `898 
E G "RXF8" 3 438 "8" `899 
E G "RXF9" 3 438 "9" `900 
E G "RXF10" 3 438 "10" `901 
E G "RXF11" 3 439 "11" `902 
E G "RXF12" 3 439 "12" `903 
E G "RXF13" 3 439 "13" `904 
E G "RXF14" 3 439 "14" `905 
E G "RXF15" 3 439 "15" `906  "receive buffer 0 control register mode 0"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "RXB0CON" 3 451 "{int1 filthit0,int1 jtoff,int1 rxb0dben,int1 rxrtrro,int1 void4,int2 rxm,int1 rxful}" `915 
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "RXB0CON_MODE_1" 3 461 "{int5 filthit,int1 rtrro,int1 rxm1,int1 rxful}" `921 
V G "RXB0CON_MODE_2" 3 462 "{int5 filthit,int1 rtrro,int1 rxm1,int1 rxful}" `922 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "RXB1CON" 3 473 "{int3 filthit,int1 rxrtrro,int1 void4,int2 rxm,int1 rxful}" `929 
C L "jump_to_isr" 3 2 2 "FUNCTION"
V G "RXB1CON_MODE_1" 3 477 "{int5 filthit,int1 rtrro,int1 rxm1,int1 rxful}" `930 
V G "RXB1CON_MODE_2" 3 478 "{int5 filthit,int1 rtrro,int1 rxm1,int1 rxful}" `931 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
E G "B0" 3 488 "4" `933 
E G "B1" 3 488 "8" `934 
E G "B2" 3 488 "16" `935 
E G "B3" 3 488 "32" `936 
E G "B4" 3 488 "64" `937 
E G "B5" 3 488 "128" `938  "bsel0"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "BSEL0" 3 499 "{int2 void10,int1 b0txen,int1 b1txen,int1 b2txen,int1 b3txen,int1 b4txen,int1 b5txen}" `947 
C L "jump_to_isr" 3 2 2 "FUNCTION"
E G "AF0" 3 508 "0" `949 
E G "AF1" 3 508 "1" `950 
E G "AF2" 3 508 "2" `951 
E G "AF3" 3 508 "3" `952 
E G "AF4" 3 509 "4" `953 
E G "AF5" 3 509 "5" `954 
E G "AF6" 3 509 "6" `955 
E G "AF7" 3 509 "7" `956 
E G "AF8" 3 509 "8" `957 
E G "AF9" 3 510 "9" `958 
E G "AF10" 3 510 "10" `959 
E G "AF11" 3 510 "11" `960 
E G "AF12" 3 510 "12" `961 
E G "AF13" 3 510 "13" `962 
E G "AF14" 3 511 "14" `963 
E G "AF15" 3 511 "15" `964  "Bn control register in receive mode"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "B0CONR" 3 532 "{int5 filhit,int1 rxrtrro,int1 rxm1,int1 rxful}" `978 
V G "B1CONR" 3 533 "{int5 filhit,int1 rxrtrro,int1 rxm1,int1 rxful}" `979 
V G "B2CONR" 3 534 "{int5 filhit,int1 rxrtrro,int1 rxm1,int1 rxful}" `980 
V G "B3CONR" 3 535 "{int5 filhit,int1 rxrtrro,int1 rxm1,int1 rxful}" `981 
V G "B4CONR" 3 536 "{int5 filhit,int1 rxrtrro,int1 rxm1,int1 rxful}" `982 
V G "B5CONR" 3 537 "{int5 filhit,int1 rxrtrro,int1 rxm1,int1 rxful}" `983  "struct bytes, used for access to specific bits"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "B0CONT" 3 553 "{int2 txpri,int1 rtren,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `990 
V G "B1CONT" 3 554 "{int2 txpri,int1 rtren,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `991 
V G "B2CONT" 3 555 "{int2 txpri,int1 rtren,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `992 
V G "B3CONT" 3 556 "{int2 txpri,int1 rtren,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `993 
V G "B4CONT" 3 557 "{int2 txpri,int1 rtren,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `994 
V G "B5CONT" 3 558 "{int2 txpri,int1 rtren,int1 txreq,int1 txerr,int1 txlarb,int1 txabt,int1 txbif}" `995  "struct bytes, used for access to specific bits"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 3 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "B0DLCR" 3 596 "{int4 dlc,int2 void45,int1 rxrtr,int1 void7}" `1012 
V G "B1DLCR" 3 597 "{int4 dlc,int2 void45,int1 rxrtr,int1 void7}" `1013 
V G "B2DLCR" 3 598 "{int4 dlc,int2 void45,int1 rxrtr,int1 void7}" `1014 
V G "B3DLCR" 3 599 "{int4 dlc,int2 void45,int1 rxrtr,int1 void7}" `1015 
V G "B4DLCR" 3 600 "{int4 dlc,int2 void45,int1 rxrtr,int1 void7}" `1016 
V G "B5DLCR" 3 601 "{int4 dlc,int2 void45,int1 rxrtr,int1 void7}" `1017 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "B0DLCT" 3 609 "{int4 dlc,int2 void45,int1 txrtr,int1 void7}" `1018 
V G "B1DLCT" 3 610 "{int4 dlc,int2 void45,int1 txrtr,int1 void7}" `1019 
V G "B2DLCT" 3 611 "{int4 dlc,int2 void45,int1 txrtr,int1 void7}" `1020 
V G "B3DLCT" 3 612 "{int4 dlc,int2 void45,int1 txrtr,int1 void7}" `1021 
V G "B4DLCT" 3 613 "{int4 dlc,int2 void45,int1 txrtr,int1 void7}" `1022 
V G "B5DLCT" 3 614 "{int4 dlc,int2 void45,int1 txrtr,int1 void7}" `1023 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 3 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
E G "ACCEPTANCE_MASK_0" 3 724 "0" `1097 
E G "ACCEPTANCE_MASK_1" 3 725 "1" `1098 
E G "FILTER_15" 3 725 "2" `1099 
E G "NO_MASK" 3 725 "3" `1100  "msel0"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "MSEL0" 3 733 "{int2 fil0,int2 fil1,int2 fil2,int2 fil3}" `1106  "msel1"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "MSEL1" 3 741 "{int2 fil4,int2 fil5,int2 fil6,int2 fil7}" `1112  "msel2"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "MSEL2" 3 749 "{int2 fil8,int2 fil9,int2 fil10,int2 fil11}" `1118  "msel3"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "MSEL3" 3 757 "{int2 fil12,int2 fil13,int2 fil14,int2 fil15}" `1124 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 3 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "txbie" 3 777 "{int2 void01,int1 txb0ie,int1 txb1ie,int1 txb2ie,int8 void567}" `1131 
C L "jump_to_isr" 3 2 3 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "bie0" 3 797 "{int1 rxb0ie,int1 rxb1ie,int1 b0ie,int1 b1ie,int1 b2ie,int1 b3ie,int1 b4ie,int1 b5ie}" `1141 
C L "jump_to_isr" 3 2 1 "FUNCTION"
E G "RXF0EN" 3 803 "1" `1143 
E G "RXF1EN" 3 803 "2" `1144 
E G "RXF2EN" 3 803 "4" `1145 
E G "RXF3EN" 3 804 "8" `1146 
E G "RXF4EN" 3 804 "16" `1147 
E G "RXF5EN" 3 804 "32" `1148 
E G "RXF6EN" 3 804 "64" `1149 
E G "RXF7EN" 3 805 "128" `1150 
E G "RXF8EN" 3 805 "256" `1151 
E G "RXF9EN" 3 805 "512" `1152 
E G "RXF10EN" 3 805 "1024" `1153 
E G "RXF11EN" 3 806 "2048" `1154 
E G "RXF12EN" 3 806 "4096" `1155 
E G "RXF13EN" 3 806 "8192" `1156 
E G "RXF14EN" 3 806 "16384" `1157 
E G "RXF15EN" 3 806 "32768" `1158  "receive filter control registers"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
E G "F0BP" 3 816 "0" `1163 
E G "F1BP" 3 816 "1" `1164 
E G "F2BP" 3 816 "2" `1165 
E G "F3BP" 3 816 "3" `1166 
E G "F4BP" 3 817 "4" `1167 
E G "F5BP" 3 817 "5" `1168 
E G "F6BP" 3 817 "6" `1169 
E G "F7BP" 3 817 "7" `1170 
E G "F8BP" 3 817 "8" `1171 
E G "F9BP" 3 818 "9" `1172 
E G "F10BP" 3 818 "10" `1173 
E G "F11BP" 3 818 "11" `1174 
E G "F12BP" 3 818 "12" `1175 
E G "F13BP" 3 818 "13" `1176 
E G "F14BP" 3 819 "14" `1177 
E G "F15BP" 3 819 "15" `1178 
E G "ARXB0" 3 821 "0" `1180 
E G "ARXB1" 3 821 "1" `1181 
E G "AB0" 3 821 "2" `1182 
E G "AB1" 3 821 "3" `1183 
E G "AB2" 3 821 "4" `1184 
E G "AB3" 3 822 "5" `1185 
E G "AB4" 3 822 "6" `1186 
E G "AB5" 3 822 "7" `1187  "receive filter buffer control registers"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "TXRXBaSIDL" 3 853 "{int3 void012,int1 ext,int1 srr,int3 void567}" `1210 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
V G "RXB0DLC" 3 864 "{int4 dlc,int1 rb0,int1 rb1,int1 rtr,int1 void7}" `1217 
V G "RXB1DLC" 3 865 "{int4 dlc,int1 rb0,int1 rb1,int1 rtr,int1 void7}" `1218 
V G "RXBaDLC" 3 866 "{int4 dlc,int1 rb0,int1 rb1,int1 rtr,int1 void7}" `1219 
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
D G "RXFILTER0" 3 951 "getenv("SFR:RXF0EIDL")" "0xF03"
D G "RXFILTER1" 3 952 "getenv("SFR:RXF1EIDL")" "0xF07"
D G "RXFILTER2" 3 953 "getenv("SFR:RXF2EIDL")" "0xF0B"
D G "RXFILTER3" 3 954 "getenv("SFR:RXF3EIDL")" "0xF0F"
D G "RXFILTER4" 3 955 "getenv("SFR:RXF4EIDL")" "0xF13"
D G "RXFILTER5" 3 956 "getenv("SFR:RXF5EIDL")" "0xF17"
D G "RXFILTER6" 3 957 "getenv("SFR:RXF6EIDL")" "0xD63"
D G "RXFILTER7" 3 958 "getenv("SFR:RXF7EIDL")" "0xD67"
D G "RXFILTER8" 3 959 "getenv("SFR:RXF8EIDL")" "0xD6B"
D G "RXFILTER9" 3 960 "getenv("SFR:RXF9EIDL")" "0xD73"
D G "RXFILTER10" 3 961 "getenv("SFR:RXF10EIDL")" "0xD77"
D G "RXFILTER11" 3 962 "getenv("SFR:RXF11EIDL")" "0xD7B"
D G "RXFILTER12" 3 963 "getenv("SFR:RXF12EIDL")" "0xD83"
D G "RXFILTER13" 3 964 "getenv("SFR:RXF13EIDL")" "0xD87"
D G "RXFILTER14" 3 965 "getenv("SFR:RXF14EIDL")" "0xD8B"
D G "RXFILTER15" 3 966 "getenv("SFR:RXF15EIDL")" "0xD93"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
D G "CAN_MASK_ACCEPT_ALL" 3 981 "0"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
f G "can_init" 3 1004 "void()" `1312 
f G "can_set_baud" 3 1005 "void()" `1313 
V L "mode" 3 1006 "CAN_OP_MODE" `1315 
f G "can_set_mode" 3 1006 "void(CAN_OP_MODE mode)" `1314 
V L "mode" 3 1007 "CAN_FUN_OP_MODE" `1317 
f G "can_set_functional_mode" 3 1007 "void(CAN_FUN_OP_MODE mode)" `1316 
V L "addr" 3 1008 "*int8" `1319 
V L "id" 3 1008 "int32" `1320 
V L "ext" 3 1008 "int8" `1321 
f G "can_set_id" 3 1008 "void(*int8 addr,int32 id,int8 ext)" `1318 
V L "addr" 3 1009 "*int8" `1323 
V L "ext" 3 1009 "int8" `1324 
f G "can_get_id" 3 1009 "int32(*int8 addr,int8 ext)" `1322 
V L "id" 3 1010 "int32" `1326 
V L "data" 3 1010 "*int8" `1327 
V L "len" 3 1010 "int8" `1328 
V L "priority" 3 1010 "int8" `1329 
V L "ext" 3 1010 "int8" `1330 
V L "rtr" 3 1010 "int8" `1331 
f G "can_putd" 3 1010 "int8(int32 id,*int8 data,int8 len,int8 priority,int8 ext,int8 rtr)" `1325 
V L "id" 3 1011 "int32" `1333 
V L "data" 3 1011 "*int8" `1334 
V L "len" 3 1011 "int8" `1335 
V L "stat" 3 1011 "{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv}" `1336 
f G "can_getd" 3 1011 "int8(int32 id,*int8 data,int8 len,{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv} stat)" `1332 
V L "b" 3 1012 "PROG_BUFFER" `1338 
f G "can_enable_rtr" 3 1012 "void(PROG_BUFFER b)" `1337 
V L "b" 3 1013 "PROG_BUFFER" `1340 
f G "can_disable_rtr" 3 1013 "void(PROG_BUFFER b)" `1339 
V L "b" 3 1014 "PROG_BUFFER" `1342 
V L "data" 3 1014 "*int8" `1343 
V L "len" 3 1014 "int8" `1344 
f G "can_load_rtr" 3 1014 "void(PROG_BUFFER b,*int8 data,int8 len)" `1341 
V L "filter" 3 1015 "int16" `1346 
f G "can_enable_filter" 3 1015 "void(int16 filter)" `1345 
V L "filter" 3 1016 "int16" `1348 
f G "can_disable_filter" 3 1016 "void(int16 filter)" `1347 
V L "buffer" 3 1017 "CAN_FILTER_ASSOCIATION_BUFFERS" `1350 
V L "filter" 3 1017 "CAN_FILTER_ASSOCIATION" `1351 
f G "can_associate_filter_to_buffer" 3 1017 "void(CAN_FILTER_ASSOCIATION_BUFFERS buffer,CAN_FILTER_ASSOCIATION filter)" `1349 
V L "mask" 3 1018 "CAN_MASK_FILTER_ASSOCIATE" `1353 
V L "filter" 3 1018 "CAN_FILTER_ASSOCIATION" `1354 
f G "can_associate_filter_to_mask" 3 1018 "void(CAN_MASK_FILTER_ASSOCIATE mask,CAN_FILTER_ASSOCIATION filter)" `1352 
V L "id" 3 1019 "int32" `1356 
V L "data" 3 1019 "*int8" `1357 
V L "len" 3 1019 "int8" `1358 
V L "stat" 3 1019 "{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv}" `1359 
f G "can_fifo_getd" 3 1019 "int8(int32 id,*int8 data,int8 len,{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv} stat)" `1355 
D G "can_debug" 2 132 ""
D G "can_kbhit" 2 136 "() (RXB0CON.rxful || RXB1CON.rxful || (B0CONR.rxful && !BSEL0.b0txen) || (B1CONR.rxful && !BSEL0.b1txen) || (B2CONR.rxful && !BSEL0.b2txen) || (B3CONR.rxful && !BSEL0.b3txen) || (B4CONR.rxful && !BSEL0.b4txen) || (B5CONR.rxful && !BSEL0.b5txen))"
D G "can_tbe" 2 137 "() (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq || (!B0CONT.txreq && BSEL0.b0txen) || (!B1CONT.txreq && BSEL0.b1txen) || (!B2CONT.txreq && BSEL0.b2txen) || (!B3CONT.txreq && BSEL0.b3txen) || (!B4CONT.txreq && BSEL0.b4txen) || (!B5CONT.txreq && BSEL0.b5txen))"
D G "can_abort" 2 138 "()                 (CANCON.abat=1)"
C L "can_fifo_getd" 2 135 2 "FUNCTION"
V G "curmode" 2 143 "int8" `1360 
V G "curfunmode" 2 144 "int8" `1361  "can_init()"
C L "can_fifo_getd" 2 135 10 "FUNCTION"
F G "can_init" 2 163 "void()" `1312 
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 6 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_init" 2 135 2 "FUNCTION"
C L "can_init" 2 135 1 "FUNCTION"
C L "can_set_baud" 2 135 54 "FUNCTION"
F G "can_set_baud" 2 303 "void()" `1313 
C L "can_set_mode" 2 135 28 "FUNCTION"
V L "mode" 2 357 "CAN_OP_MODE" `1379 
F G "can_set_mode" 2 357 "void(CAN_OP_MODE mode)" `1314 
C L "can_set_functional_mode" 2 135 43 "FUNCTION"
V L "mode" 2 418 "CAN_FUN_OP_MODE" `1379 
F G "can_set_functional_mode" 2 419 "void(CAN_FUN_OP_MODE mode)" `1316 
C L "can_set_functional_mode" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 8 "FUNCTION"
V L "addr" 2 444 "*int8" `1319 
V L "id" 2 444 "int32" `1320 
V L "ext" 2 444 "int8" `1381 
F G "can_set_id" 2 444 "void(*int8 addr,int32 id,int8 ext)" `1318  "int *ptr;"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 2 "FUNCTION"
C L "can_set_id" 2 135 2 "FUNCTION"
C L "can_set_id" 2 135 2 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 2 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_id" 2 135 1 "FUNCTION"
C L "can_set_standard_id" 2 135 5 "FUNCTION"
V L "addr" 2 500 "*int8" `1379 
V L "id" 2 500 "int32" `1380 
F G "can_set_standard_id" 2 501 "void(*int8 addr,int32 id,int8 ext)" `1378  "eidl"
C L "can_set_standard_id" 2 135 1 "FUNCTION"
C L "can_set_standard_id" 2 135 1 "FUNCTION"
C L "can_set_standard_id" 2 135 1 "FUNCTION"
C L "can_set_extended_id" 2 135 5 "FUNCTION"
V L "addr" 2 531 "*int8" `1382 
V L "id" 2 531 "int32" `1383 
F G "can_set_extended_id" 2 532 "void(*int8 addr,int32 id)" `1381  "eidl"
C L "can_set_extended_id" 2 135 2 "FUNCTION"
C L "can_set_extended_id" 2 135 2 "FUNCTION"
C L "can_set_extended_id" 2 135 1 "FUNCTION"
C L "can_set_extended_id" 2 135 1 "FUNCTION"
C L "can_set_extended_id" 2 135 1 "FUNCTION"
C L "can_set_extended_id" 2 135 1 "FUNCTION"
C L "can_set_extended_id" 2 135 1 "FUNCTION"
C L "can_get_id" 2 135 9 "FUNCTION"
V L "addr" 2 569 "*int8" `1323 
V L "ext" 2 569 "int8" `1386 
F G "can_get_id" 2 569 "int32(*int8 addr,int8 ext)" `1322 
V L "ret" 2 570 "int32" `1384 
V L "ptr" 2 571 "*int8" `1385 
C L "can_get_id" 2 135 1 "FUNCTION"
C L "can_get_id" 2 135 1 "FUNCTION"
C L "can_get_id" 2 135 1 "FUNCTION"
C L "can_get_id" 2 135 1 "FUNCTION"
C L "can_get_id" 2 135 1 "FUNCTION"
C L "can_get_id" 2 135 1 "FUNCTION"
C L "can_get_extended_id" 2 135 4 "FUNCTION"
V L "addr" 2 611 "*int8" `1387 
F G "can_get_extended_id" 2 612 "int32(*int8 addr)" `1386 
V L "ret" 2 613 "int32" `1388 
C L "can_get_extended_id" 2 135 1 "FUNCTION"
C L "can_get_extended_id" 2 135 1 "FUNCTION"
C L "can_get_extended_id" 2 135 1 "FUNCTION"
C L "can_get_extended_id" 2 135 1 "FUNCTION"
C L "can_get_standard_id" 2 135 4 "FUNCTION"
V L "addr" 2 640 "*int8" `1390 
F G "can_get_standard_id" 2 641 "int32(*int8 addr)" `1389 
V L "ret" 2 642 "int32" `1391 
C L "can_get_standard_id" 2 135 1 "FUNCTION"
C L "can_get_standard_id" 2 135 1 "FUNCTION"
C L "can_putd" 2 135 16 "FUNCTION"
V L "id" 2 676 "int32" `1326 
V L "data" 2 676 "*int8" `1327 
V L "len" 2 676 "int8" `1328 
V L "priority" 2 676 "int8" `1329 
V L "ext" 2 676 "int8" `1330 
V L "rtr" 2 676 "int8" `1398 
F G "can_putd" 2 676 "int8(int32 id,*int8 data,int8 len,int8 priority,int8 ext,int8 rtr)" `1325 
V L "i" 2 677 "int8" `1392 
V L "txd0" 2 678 "*int8" `1393 
V L "port" 2 679 "int8" `1394 
C L "can_putd" 2 135 2 "FUNCTION"
C L "can_putd" 2 135 1 "FUNCTION"
C L "can_putd" 2 135 1 "FUNCTION"
C L "can_putd" 2 135 1 "FUNCTION"
C L "can_putd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 11 "FUNCTION"
V L "id" 2 805 "int32" `1333 
V L "data" 2 805 "*int8" `1334 
V L "len" 2 805 "int8" `1335 
V L "stat" 2 805 "{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv}" `1399 
F G "can_getd" 2 806 "int8(int32 id,*int8 data,int8 len,{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv} stat)" `1332 
V L "i" 2 807 "int8" `1395 
V L "ptr" 2 808 "*int8" `1396 
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 2 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 2 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 2 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 2 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 2 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 2 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_getd" 2 135 1 "FUNCTION"
C L "can_enable_b_transfer" 2 135 13 "FUNCTION"
V L "b" 2 1058 "PROG_BUFFER" `1398 
F G "can_enable_b_transfer" 2 1059 "void(PROG_BUFFER b,{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv} stat)" `1397 
V L "temp" 2 1060 "int8" `1399 
C L "can_enable_b_receiver" 2 135 15 "FUNCTION"
V L "b" 2 1093 "PROG_BUFFER" `1401 
F G "can_enable_b_receiver" 2 1094 "void(PROG_BUFFER b)" `1400 
V L "temp" 2 1095 "int8" `1402 
C L "can_enable_rtr" 2 135 18 "FUNCTION"
V L "b" 2 1133 "PROG_BUFFER" `1404 
F G "can_enable_rtr" 2 1134 "void(PROG_BUFFER b)" `1337 
C L "can_disable_rtr" 2 135 18 "FUNCTION"
V L "b" 2 1183 "PROG_BUFFER" `1404 
F G "can_disable_rtr" 2 1184 "void(PROG_BUFFER b)" `1339 
C L "can_load_rtr" 2 135 20 "FUNCTION"
V L "b" 2 1232 "PROG_BUFFER" `1342 
V L "data" 2 1232 "*int8" `1343 
V L "len" 2 1232 "int8" `1406 
F G "can_load_rtr" 2 1233 "void(PROG_BUFFER b,*int8 data,int8 len)" `1341 
V L "ptr" 2 1235 "*int8" `1403  "do no damage to the current mode;"
C L "can_enable_filter" 2 135 9 "FUNCTION"
V L "filter" 2 1301 "int16" `1405 
F G "can_enable_filter" 2 1302 "void(int16 filter)" `1345 
V L "ptr" 2 1303 "*int16" `1404 
C L "can_disable_filter" 2 135 9 "FUNCTION"
V L "filter" 2 1333 "int16" `1406 
F G "can_disable_filter" 2 1334 "void(int16 filter)" `1347 
V L "ptr" 2 1335 "*int16" `1405 
C L "can_associate_filter_to_buffer" 2 135 14 "FUNCTION"
V L "buffer" 2 1372 "CAN_FILTER_ASSOCIATION_BUFFERS" `1350 
V L "filter" 2 1372 "CAN_FILTER_ASSOCIATION" `1408 
F G "can_associate_filter_to_buffer" 2 1373 "void(CAN_FILTER_ASSOCIATION_BUFFERS buffer,CAN_FILTER_ASSOCIATION filter)" `1349 
V L "ptr" 2 1374 "*int8" `1406 
C L "can_associate_filter_to_mask" 2 135 16 "FUNCTION"
V L "mask" 2 1422 "CAN_MASK_FILTER_ASSOCIATE" `1353 
V L "filter" 2 1422 "CAN_FILTER_ASSOCIATION" `1409 
F G "can_associate_filter_to_mask" 2 1423 "void(CAN_MASK_FILTER_ASSOCIATE mask,CAN_FILTER_ASSOCIATION filter)" `1352 
V L "ptr" 2 1424 "*int8" `1407 
C L "can_fifo_getd" 2 135 11 "FUNCTION"
V L "id" 2 1475 "int32" `1356 
V L "data" 2 1475 "*int8" `1357 
V L "len" 2 1475 "int8" `1358 
V L "stat" 2 1475 "{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv}" `1412 
F G "can_fifo_getd" 2 1476 "int8(int32 id,*int8 data,int8 len,{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv} stat)" `1355 
V L "i" 2 1478 "int8" `1408 
V L "ptr" 2 1479 "*int8" `1409 
C L "can_fifo_getd" 2 135 1 "FUNCTION"
C L "can_fifo_getd" 2 135 1 "FUNCTION"
C L "can_fifo_getd" 2 135 1 "FUNCTION"
C L "can_fifo_getd" 2 135 1 "FUNCTION"
C L "can_t0_putd" 2 135 19 "FUNCTION"
V L "id" 2 1548 "int32" `1411 
V L "data" 2 1548 "*int8" `1412 
V L "len" 2 1548 "int8" `1413 
V L "pri" 2 1548 "int8" `1414 
V L "ext" 2 1548 "int8" `1415 
V L "rtr" 2 1548 "int8" `1416 
F G "can_t0_putd" 2 1549 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1410 
V L "ptr" 2 1550 "*int8" `1417 
C L "can_t1_putd" 2 135 1 "FUNCTION"
V L "id" 2 1578 "int32" `1419 
V L "data" 2 1578 "*int8" `1420 
V L "len" 2 1578 "int8" `1421 
V L "pri" 2 1578 "int8" `1422 
V L "ext" 2 1578 "int8" `1423 
V L "rtr" 2 1578 "int8" `1424 
F G "can_t1_putd" 2 1579 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1418 
V L "ptr" 2 1580 "*int8" `1425 
C L "can_t2_putd" 2 135 1 "FUNCTION"
V L "id" 2 1608 "int32" `1427 
V L "data" 2 1608 "*int8" `1428 
V L "len" 2 1608 "int8" `1429 
V L "pri" 2 1608 "int8" `1430 
V L "ext" 2 1608 "int8" `1431 
V L "rtr" 2 1608 "int8" `1432 
F G "can_t2_putd" 2 1609 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1426 
V L "ptr" 2 1610 "*int8" `1433 
C L "can_b0_putd" 2 135 1 "FUNCTION"
V L "id" 2 1638 "int32" `1435 
V L "data" 2 1638 "*int8" `1436 
V L "len" 2 1638 "int8" `1437 
V L "pri" 2 1638 "int8" `1438 
V L "ext" 2 1638 "int8" `1439 
V L "rtr" 2 1638 "int8" `1440 
F G "can_b0_putd" 2 1639 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1434 
V L "txd0" 2 1640 "*int8" `1441 
C L "can_b0_putd" 2 135 1 "FUNCTION"
C L "can_b0_putd" 2 135 1 "FUNCTION"
C L "can_b0_putd" 2 135 1 "FUNCTION"
C L "can_b0_putd" 2 135 1 "FUNCTION"
C L "can_b0_putd" 2 135 1 "FUNCTION"
C L "can_b1_putd" 2 135 1 "FUNCTION"
V L "id" 2 1677 "int32" `1443 
V L "data" 2 1677 "*int8" `1444 
V L "len" 2 1677 "int8" `1445 
V L "pri" 2 1677 "int8" `1446 
V L "ext" 2 1677 "int8" `1447 
V L "rtr" 2 1677 "int8" `1448 
F G "can_b1_putd" 2 1678 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1442 
V L "txd0" 2 1679 "*int8" `1449 
C L "can_b1_putd" 2 135 1 "FUNCTION"
C L "can_b1_putd" 2 135 1 "FUNCTION"
C L "can_b1_putd" 2 135 1 "FUNCTION"
C L "can_b1_putd" 2 135 1 "FUNCTION"
C L "can_b1_putd" 2 135 1 "FUNCTION"
C L "can_b2_putd" 2 135 1 "FUNCTION"
V L "id" 2 1715 "int32" `1451 
V L "data" 2 1715 "*int8" `1452 
V L "len" 2 1715 "int8" `1453 
V L "pri" 2 1715 "int8" `1454 
V L "ext" 2 1715 "int8" `1455 
V L "rtr" 2 1715 "int8" `1456 
F G "can_b2_putd" 2 1716 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1450 
V L "txd0" 2 1717 "*int8" `1457 
C L "can_b2_putd" 2 135 1 "FUNCTION"
C L "can_b2_putd" 2 135 1 "FUNCTION"
C L "can_b2_putd" 2 135 1 "FUNCTION"
C L "can_b2_putd" 2 135 1 "FUNCTION"
C L "can_b2_putd" 2 135 1 "FUNCTION"
C L "can_b3_putd" 2 135 1 "FUNCTION"
V L "id" 2 1753 "int32" `1459 
V L "data" 2 1753 "*int8" `1460 
V L "len" 2 1753 "int8" `1461 
V L "pri" 2 1753 "int8" `1462 
V L "ext" 2 1753 "int8" `1463 
V L "rtr" 2 1753 "int8" `1464 
F G "can_b3_putd" 2 1754 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1458 
V L "txd0" 2 1755 "*int8" `1465 
C L "can_b3_putd" 2 135 1 "FUNCTION"
C L "can_b3_putd" 2 135 1 "FUNCTION"
C L "can_b3_putd" 2 135 1 "FUNCTION"
C L "can_b3_putd" 2 135 1 "FUNCTION"
C L "can_b3_putd" 2 135 1 "FUNCTION"
C L "can_b4_putd" 2 135 1 "FUNCTION"
V L "id" 2 1792 "int32" `1467 
V L "data" 2 1792 "*int8" `1468 
V L "len" 2 1792 "int8" `1469 
V L "pri" 2 1792 "int8" `1470 
V L "ext" 2 1792 "int8" `1471 
V L "rtr" 2 1792 "int8" `1472 
F G "can_b4_putd" 2 1793 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1466 
V L "txd0" 2 1794 "*int8" `1473 
C L "can_b4_putd" 2 135 1 "FUNCTION"
C L "can_b4_putd" 2 135 1 "FUNCTION"
C L "can_b4_putd" 2 135 1 "FUNCTION"
C L "can_b4_putd" 2 135 1 "FUNCTION"
C L "can_b4_putd" 2 135 1 "FUNCTION"
C L "can_b5_putd" 2 135 1 "FUNCTION"
V L "id" 2 1830 "int32" `1475 
V L "data" 2 1830 "*int8" `1476 
V L "len" 2 1830 "int8" `1477 
V L "pri" 2 1830 "int8" `1478 
V L "ext" 2 1830 "int8" `1479 
V L "rtr" 2 1830 "int8" `1480 
F G "can_b5_putd" 2 1831 "int8(int32 id,*int8 data,int8 len,int8 pri,int8 ext,int8 rtr)" `1474 
V L "txd0" 2 1832 "*int8" `1481 
C L "can_b5_putd" 2 135 1 "FUNCTION"
C L "can_b5_putd" 2 135 1 "FUNCTION"
C L "can_b5_putd" 2 135 1 "FUNCTION"
C L "can_b5_putd" 2 135 1 "FUNCTION"
C L "can_b5_putd" 2 135 1 "FUNCTION"
D G "PIN_LED1" 0 31 "PIN_A2"
D G "PIN_LED2" 0 32 "PIN_A1"
D G "LED1_LOW" 0 34 "output_low(PIN_LED1)"
D G "LED1_HIGH" 0 35 "output_high(PIN_LED1)"
D G "LED2_LOW" 0 36 "output_low(PIN_LED2)"
D G "LED2_HIGH" 0 37 "output_high(PIN_LED2)"
D G "ASK_FOR_ID_AD_B" 0 39 "0x201" "ask for AD info from CAN port B"
V G "rx_id" 0 42 "int32" `1482 
V G "rx_len" 0 43 "int8" `1483 
V G "i" 0 43 "int8" `1484 
V G "b" 0 43 "int8" `1485 
V G "stat" 0 44 "{int1 err_ovfl,int8 filthit,int8 buffer,int1 rtr,int1 ext,int1 inv}" `1486 
V G "receive" 0 45 "int8[2]" `1487 
V G "send" 0 46 "int8[2]" `1488 
V G "control" 0 47 "int16" `1489 
F G "MAIN" 0 52 "void()" `1490 
C L "MAIN" 0 41 1 "FUNCTION"
C L "MAIN" 0 41 1 "FUNCTION"
C L "MAIN" 0 41 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "port_f_pullups" 1 0
F B "port_g_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
